#pragma once

#include "/Engine/Private/Common.ush"

//////////////////////////////////////////////////////
float sphere(float3 p, float r)
{
    return length(p)-r;   
}

float blob5(float d1, float d2, float d3, float d4, float d5)
{
    float k = 2.0;
    return -log(exp(-k*d1)+exp(-k*d2)+exp(-k*d3)+exp(-k*d4)+exp(-k*d5))/k;
}

float map(float3 p, float T)
{
    // scale to fit SDF logic
    p *= 0.004f;

    float s = smoothstep( -0.7, 0.7, sin(0.5*T));
    float a = lerp(0.5, 2.0, s);
    float t = 1.0*T;
    
    float s1 = sphere(p +a*float3(cos(t*1.1),cos(t*1.3),cos(t*1.7)), 1.0);
    float s2 = sphere(p +a*float3(cos(t*0.7),cos(t*1.9),cos(t*2.3)), 1.2);
    float s3 = sphere(p +a*float3(cos(t*0.3),cos(t*2.9),sin(t*1.1)), 1.5);
    float s4 = sphere(p +a*float3(sin(t*1.3),sin(t*1.7),sin(t*0.7)), 0.4);
    float s5 = sphere(p +a*float3(sin(t*2.3),sin(t*1.9),sin(t*2.9)), 1.0);
    
    return blob5(s1, s2, s3, s4, s5);
}
//////////////////////////////////////////////////////

float GetDist(float3 p, float time)
{
    return map(p*16.f, time);

    return length(p) - 15.f;
}

float4 GetNormalAndDist(float3 p, float time)
{
    float v = GetDist(p, time);
    const float2 e = float2(0.001f, 0.f);
    float dx = GetDist(p + e.xyy, time) - v;
    float dy = GetDist(p + e.yxy, time) - v;
    float dz = GetDist(p + e.yyx, time) - v;
    return float4(dx, dy, dz, v);
}

void VertexInterp2(float isolevel, float3 p0, float3 p1, float4 f0, float4 f1, out float3 p, out float3 n)
{
    float t = (isolevel - f0.w) / (f1.w - f0.w);
    p = lerp(p0, p1, t);
    n.x = lerp(f0.x, f1.x, t);
    n.y = lerp(f0.y, f1.y, t);
    n.z = lerp(f0.z, f1.z, t);
    n = normalize(n);
}